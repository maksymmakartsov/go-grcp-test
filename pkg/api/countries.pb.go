// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: countries.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// namespace ответов
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countries_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_countries_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_countries_proto_rawDescGZIP(), []int{0}
}

// namesapce запросов
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countries_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_countries_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_countries_proto_rawDescGZIP(), []int{1}
}

// namespace ответов по стране
type Response_Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Response_Country) Reset() {
	*x = Response_Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countries_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_Country) ProtoMessage() {}

func (x *Response_Country) ProtoReflect() protoreflect.Message {
	mi := &file_countries_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_Country.ProtoReflect.Descriptor instead.
func (*Response_Country) Descriptor() ([]byte, []int) {
	return file_countries_proto_rawDescGZIP(), []int{0, 0}
}

// данные по одной стране
type Response_Country_Single struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`       // id страны
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`    // имя страны
	Likes int32  `protobuf:"varint,3,opt,name=likes,proto3" json:"likes,omitempty"` // количество лайков
}

func (x *Response_Country_Single) Reset() {
	*x = Response_Country_Single{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countries_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_Country_Single) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_Country_Single) ProtoMessage() {}

func (x *Response_Country_Single) ProtoReflect() protoreflect.Message {
	mi := &file_countries_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_Country_Single.ProtoReflect.Descriptor instead.
func (*Response_Country_Single) Descriptor() ([]byte, []int) {
	return file_countries_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Response_Country_Single) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Response_Country_Single) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Response_Country_Single) GetLikes() int32 {
	if x != nil {
		return x.Likes
	}
	return 0
}

// данные по нескольким странам
type Response_Country_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Countries []*Response_Country_Single `protobuf:"bytes,1,rep,name=countries,proto3" json:"countries,omitempty"` // страны
}

func (x *Response_Country_List) Reset() {
	*x = Response_Country_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countries_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_Country_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_Country_List) ProtoMessage() {}

func (x *Response_Country_List) ProtoReflect() protoreflect.Message {
	mi := &file_countries_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_Country_List.ProtoReflect.Descriptor instead.
func (*Response_Country_List) Descriptor() ([]byte, []int) {
	return file_countries_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Response_Country_List) GetCountries() []*Response_Country_Single {
	if x != nil {
		return x.Countries
	}
	return nil
}

// namespace запросов для стран
type Request_Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Request_Country) Reset() {
	*x = Request_Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countries_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Country) ProtoMessage() {}

func (x *Request_Country) ProtoReflect() protoreflect.Message {
	mi := &file_countries_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Country.ProtoReflect.Descriptor instead.
func (*Request_Country) Descriptor() ([]byte, []int) {
	return file_countries_proto_rawDescGZIP(), []int{1, 0}
}

// параметры запроса списка стран
type Request_Country_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"` // отступ в количестве стран, с которого необходимо начать возвращать результат
	Limit  uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`   // количеств стран, которое необходимо вернуть
}

func (x *Request_Country_List) Reset() {
	*x = Request_Country_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countries_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Country_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Country_List) ProtoMessage() {}

func (x *Request_Country_List) ProtoReflect() protoreflect.Message {
	mi := &file_countries_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Country_List.ProtoReflect.Descriptor instead.
func (*Request_Country_List) Descriptor() ([]byte, []int) {
	return file_countries_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *Request_Country_List) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Request_Country_List) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// параметры запроса лайка страны
type Request_Country_Like struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // id страны
}

func (x *Request_Country_Like) Reset() {
	*x = Request_Country_Like{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countries_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Country_Like) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Country_Like) ProtoMessage() {}

func (x *Request_Country_Like) ProtoReflect() protoreflect.Message {
	mi := &file_countries_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Country_Like.ProtoReflect.Descriptor instead.
func (*Request_Country_Like) Descriptor() ([]byte, []int) {
	return file_countries_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *Request_Country_Like) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// параметры запроса дислайка страны
type Request_Country_Dislike struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // id страны
}

func (x *Request_Country_Dislike) Reset() {
	*x = Request_Country_Dislike{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countries_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Country_Dislike) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Country_Dislike) ProtoMessage() {}

func (x *Request_Country_Dislike) ProtoReflect() protoreflect.Message {
	mi := &file_countries_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Country_Dislike.ProtoReflect.Descriptor instead.
func (*Request_Country_Dislike) Descriptor() ([]byte, []int) {
	return file_countries_proto_rawDescGZIP(), []int{1, 0, 2}
}

func (x *Request_Country_Dislike) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// параметры запроса для лайка или дислайка страны
type Request_Country_LikeDislike struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*Request_Country_LikeDislike_Like
	//	*Request_Country_LikeDislike_Dislike
	Action isRequest_Country_LikeDislike_Action `protobuf_oneof:"action"`
}

func (x *Request_Country_LikeDislike) Reset() {
	*x = Request_Country_LikeDislike{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countries_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Country_LikeDislike) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Country_LikeDislike) ProtoMessage() {}

func (x *Request_Country_LikeDislike) ProtoReflect() protoreflect.Message {
	mi := &file_countries_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Country_LikeDislike.ProtoReflect.Descriptor instead.
func (*Request_Country_LikeDislike) Descriptor() ([]byte, []int) {
	return file_countries_proto_rawDescGZIP(), []int{1, 0, 3}
}

func (m *Request_Country_LikeDislike) GetAction() isRequest_Country_LikeDislike_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Request_Country_LikeDislike) GetLike() *Request_Country_Like {
	if x, ok := x.GetAction().(*Request_Country_LikeDislike_Like); ok {
		return x.Like
	}
	return nil
}

func (x *Request_Country_LikeDislike) GetDislike() *Request_Country_Dislike {
	if x, ok := x.GetAction().(*Request_Country_LikeDislike_Dislike); ok {
		return x.Dislike
	}
	return nil
}

type isRequest_Country_LikeDislike_Action interface {
	isRequest_Country_LikeDislike_Action()
}

type Request_Country_LikeDislike_Like struct {
	Like *Request_Country_Like `protobuf:"bytes,1,opt,name=like,proto3,oneof"`
}

type Request_Country_LikeDislike_Dislike struct {
	Dislike *Request_Country_Dislike `protobuf:"bytes,2,opt,name=dislike,proto3,oneof"`
}

func (*Request_Country_LikeDislike_Like) isRequest_Country_LikeDislike_Action() {}

func (*Request_Country_LikeDislike_Dislike) isRequest_Country_LikeDislike_Action() {}

// данные по одной стране
type Request_Country_Single struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // id страны
}

func (x *Request_Country_Single) Reset() {
	*x = Request_Country_Single{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countries_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Country_Single) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Country_Single) ProtoMessage() {}

func (x *Request_Country_Single) ProtoReflect() protoreflect.Message {
	mi := &file_countries_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Country_Single.ProtoReflect.Descriptor instead.
func (*Request_Country_Single) Descriptor() ([]byte, []int) {
	return file_countries_proto_rawDescGZIP(), []int{1, 0, 4}
}

func (x *Request_Country_Single) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_countries_proto protoreflect.FileDescriptor

var file_countries_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x9e, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x1a, 0x91, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x1a,
	0x42, 0x0a, 0x06, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6b, 0x65, 0x73, 0x1a, 0x42, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x91, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x1a,
	0x34, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x16, 0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x19, 0x0a,
	0x07, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x82, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x6b,
	0x65, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x6b,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x6c, 0x69, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x6c,
	0x69, 0x6b, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x0a,
	0x06, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x32, 0xe8, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0b, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x69,
	0x73, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x6b, 0x65,
	0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x47, 0x0a, 0x06, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_countries_proto_rawDescOnce sync.Once
	file_countries_proto_rawDescData = file_countries_proto_rawDesc
)

func file_countries_proto_rawDescGZIP() []byte {
	file_countries_proto_rawDescOnce.Do(func() {
		file_countries_proto_rawDescData = protoimpl.X.CompressGZIP(file_countries_proto_rawDescData)
	})
	return file_countries_proto_rawDescData
}

var file_countries_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_countries_proto_goTypes = []interface{}{
	(*Response)(nil),                    // 0: api.Response
	(*Request)(nil),                     // 1: api.Request
	(*Response_Country)(nil),            // 2: api.Response.Country
	(*Response_Country_Single)(nil),     // 3: api.Response.Country.Single
	(*Response_Country_List)(nil),       // 4: api.Response.Country.List
	(*Request_Country)(nil),             // 5: api.Request.Country
	(*Request_Country_List)(nil),        // 6: api.Request.Country.List
	(*Request_Country_Like)(nil),        // 7: api.Request.Country.Like
	(*Request_Country_Dislike)(nil),     // 8: api.Request.Country.Dislike
	(*Request_Country_LikeDislike)(nil), // 9: api.Request.Country.LikeDislike
	(*Request_Country_Single)(nil),      // 10: api.Request.Country.Single
}
var file_countries_proto_depIdxs = []int32{
	3,  // 0: api.Response.Country.List.countries:type_name -> api.Response.Country.Single
	7,  // 1: api.Request.Country.LikeDislike.like:type_name -> api.Request.Country.Like
	8,  // 2: api.Request.Country.LikeDislike.dislike:type_name -> api.Request.Country.Dislike
	6,  // 3: api.Countries.List:input_type -> api.Request.Country.List
	9,  // 4: api.Countries.LikeDislike:input_type -> api.Request.Country.LikeDislike
	10, // 5: api.Countries.Single:input_type -> api.Request.Country.Single
	4,  // 6: api.Countries.List:output_type -> api.Response.Country.List
	3,  // 7: api.Countries.LikeDislike:output_type -> api.Response.Country.Single
	3,  // 8: api.Countries.Single:output_type -> api.Response.Country.Single
	6,  // [6:9] is the sub-list for method output_type
	3,  // [3:6] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_countries_proto_init() }
func file_countries_proto_init() {
	if File_countries_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_countries_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countries_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countries_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countries_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_Country_Single); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countries_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_Country_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countries_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countries_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Country_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countries_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Country_Like); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countries_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Country_Dislike); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countries_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Country_LikeDislike); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countries_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Country_Single); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_countries_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Request_Country_LikeDislike_Like)(nil),
		(*Request_Country_LikeDislike_Dislike)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_countries_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_countries_proto_goTypes,
		DependencyIndexes: file_countries_proto_depIdxs,
		MessageInfos:      file_countries_proto_msgTypes,
	}.Build()
	File_countries_proto = out.File
	file_countries_proto_rawDesc = nil
	file_countries_proto_goTypes = nil
	file_countries_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CountriesClient is the client API for Countries service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CountriesClient interface {
	// запрос на получение списка стран
	List(ctx context.Context, in *Request_Country_List, opts ...grpc.CallOption) (*Response_Country_List, error)
	// запрос на лайк или дислайк конкретной страны с возможностью потоковой отсылки новых лайков
	// и дислайков для разных стран
	LikeDislike(ctx context.Context, opts ...grpc.CallOption) (Countries_LikeDislikeClient, error)
	// запрос на потоковое получение текущей страны
	Single(ctx context.Context, in *Request_Country_Single, opts ...grpc.CallOption) (Countries_SingleClient, error)
}

type countriesClient struct {
	cc grpc.ClientConnInterface
}

func NewCountriesClient(cc grpc.ClientConnInterface) CountriesClient {
	return &countriesClient{cc}
}

func (c *countriesClient) List(ctx context.Context, in *Request_Country_List, opts ...grpc.CallOption) (*Response_Country_List, error) {
	out := new(Response_Country_List)
	err := c.cc.Invoke(ctx, "/api.Countries/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) LikeDislike(ctx context.Context, opts ...grpc.CallOption) (Countries_LikeDislikeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Countries_serviceDesc.Streams[0], "/api.Countries/LikeDislike", opts...)
	if err != nil {
		return nil, err
	}
	x := &countriesLikeDislikeClient{stream}
	return x, nil
}

type Countries_LikeDislikeClient interface {
	Send(*Request_Country_LikeDislike) error
	CloseAndRecv() (*Response_Country_Single, error)
	grpc.ClientStream
}

type countriesLikeDislikeClient struct {
	grpc.ClientStream
}

func (x *countriesLikeDislikeClient) Send(m *Request_Country_LikeDislike) error {
	return x.ClientStream.SendMsg(m)
}

func (x *countriesLikeDislikeClient) CloseAndRecv() (*Response_Country_Single, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response_Country_Single)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *countriesClient) Single(ctx context.Context, in *Request_Country_Single, opts ...grpc.CallOption) (Countries_SingleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Countries_serviceDesc.Streams[1], "/api.Countries/Single", opts...)
	if err != nil {
		return nil, err
	}
	x := &countriesSingleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Countries_SingleClient interface {
	Recv() (*Response_Country_Single, error)
	grpc.ClientStream
}

type countriesSingleClient struct {
	grpc.ClientStream
}

func (x *countriesSingleClient) Recv() (*Response_Country_Single, error) {
	m := new(Response_Country_Single)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CountriesServer is the server API for Countries service.
type CountriesServer interface {
	// запрос на получение списка стран
	List(context.Context, *Request_Country_List) (*Response_Country_List, error)
	// запрос на лайк или дислайк конкретной страны с возможностью потоковой отсылки новых лайков
	// и дислайков для разных стран
	LikeDislike(Countries_LikeDislikeServer) error
	// запрос на потоковое получение текущей страны
	Single(*Request_Country_Single, Countries_SingleServer) error
}

// UnimplementedCountriesServer can be embedded to have forward compatible implementations.
type UnimplementedCountriesServer struct {
}

func (*UnimplementedCountriesServer) List(context.Context, *Request_Country_List) (*Response_Country_List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCountriesServer) LikeDislike(Countries_LikeDislikeServer) error {
	return status.Errorf(codes.Unimplemented, "method LikeDislike not implemented")
}
func (*UnimplementedCountriesServer) Single(*Request_Country_Single, Countries_SingleServer) error {
	return status.Errorf(codes.Unimplemented, "method Single not implemented")
}

func RegisterCountriesServer(s *grpc.Server, srv CountriesServer) {
	s.RegisterService(&_Countries_serviceDesc, srv)
}

func _Countries_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_Country_List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Countries/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).List(ctx, req.(*Request_Country_List))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_LikeDislike_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CountriesServer).LikeDislike(&countriesLikeDislikeServer{stream})
}

type Countries_LikeDislikeServer interface {
	SendAndClose(*Response_Country_Single) error
	Recv() (*Request_Country_LikeDislike, error)
	grpc.ServerStream
}

type countriesLikeDislikeServer struct {
	grpc.ServerStream
}

func (x *countriesLikeDislikeServer) SendAndClose(m *Response_Country_Single) error {
	return x.ServerStream.SendMsg(m)
}

func (x *countriesLikeDislikeServer) Recv() (*Request_Country_LikeDislike, error) {
	m := new(Request_Country_LikeDislike)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Countries_Single_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request_Country_Single)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CountriesServer).Single(m, &countriesSingleServer{stream})
}

type Countries_SingleServer interface {
	Send(*Response_Country_Single) error
	grpc.ServerStream
}

type countriesSingleServer struct {
	grpc.ServerStream
}

func (x *countriesSingleServer) Send(m *Response_Country_Single) error {
	return x.ServerStream.SendMsg(m)
}

var _Countries_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Countries",
	HandlerType: (*CountriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Countries_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LikeDislike",
			Handler:       _Countries_LikeDislike_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Single",
			Handler:       _Countries_Single_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "countries.proto",
}
